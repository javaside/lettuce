这个是在lettuce基础上修改过的redis client
主要是异步上增加了Promise支持

异步连接的使用

  RedisAsyncConnection<String, String> async = client.connectAsync()
  async.get("key").then(new Callback<String>() {
      public void call(String value) {
      
      }
  }).fail(new FailCallback() {
      public void fail(String error) {
      
      }
  });

也可以使用Promises来支持多个异步操作

  Promise<String> promise1 = async.get("key1");
  Promise<String> promise2 = async.get("key2");
  Promises.promises(promise1,promise2).then(new Callback<List<String>>() {
      public void call(List<String> values) {
         String v1 = values.get(0);
         String v2 = values.get(1);
      }
  });

如果需要多步操作，下一次的操作依赖上一次的返回值,可以试用PipePromise

redis.get("USER.ID").then(new DonePipe<String>() {
    @Override
    public Promise<String> pipeDone(String value) {
        System.out.println("USER.ID -> " + value);
        return redis.get("USER:" + value);
    }
}).then(new Callback<String>() {
    @Override
    public void call(String value) {
        System.out.println("USER -> " + value);

    }
});
